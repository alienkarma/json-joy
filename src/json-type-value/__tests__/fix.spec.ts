import {TypeSystem} from '../../json-type/system';
import {FunctionType, t} from '../../json-type/type';
import {Value} from '../Value';
import {JsonDecoder} from '@jsonjoy.com/json-pack/lib/json';
import {CborJsonValueCodec} from '@jsonjoy.com/json-pack/lib/codecs/cbor';
import * as fs from 'fs';
import {Writer} from '@jsonjoy.com/util/lib/buffers/Writer';

const decoder = new JsonDecoder();
const systemSchema = {"BlockId":{"kind":"str","title":"Block ID","min":6,"max":256},"BlockCur":{"kind":"num","title":"Block Sequence Number","gte":-1,"format":"i32"},"BlockBatchSeq":{"kind":"num","title":"Batch Sequence Number","gte":0,"format":"u32"},"Block":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"ref","ref":"BlockId"}},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"}},{"kind":"field","key":"uts","type":{"kind":"num","format":"u"}},{"kind":"field","key":"snapshot","type":{"kind":"ref","ref":"BlockSnapshot"}},{"kind":"field","key":"tip","type":{"kind":"arr","type":{"kind":"ref","ref":"BlockBatch"}}}]},"BlockSnapshotReturn":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"ref","ref":"BlockId"},"title":"Block ID","description":"The ID of the block."},{"kind":"field","key":"seq","type":{"kind":"ref","ref":"BlockCur"},"title":"Snapshot Cursor","description":"The cursor of the snapshot, representing the position in the history."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Snapshot Creation Time","description":"The time when the snapshot was created, in milliseconds since the Unix epoch."}],"title":"Block Snapshot Return","description":"Partial snapshot returned on creation, doesn't include the blob."},"BlockSnapshot":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"ref","ref":"BlockId"},"title":"Block ID","description":"The ID of the block."},{"kind":"field","key":"seq","type":{"kind":"ref","ref":"BlockCur"},"title":"Snapshot Cursor","description":"The cursor of the snapshot, representing the position in the history."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Snapshot Creation Time","description":"The time when the snapshot was created, in milliseconds since the Unix epoch."},{"kind":"field","key":"blob","type":{"kind":"bin","type":{"kind":"any"}},"title":"Snapshot Blob","description":"A serialized JSON CRDT model."}],"title":"Block Snapshot","description":"A snapshot of the block's state at a certain point in time."},"NewBlockSnapshotResponse":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"ref","ref":"BlockId"},"title":"Block ID","description":"The ID of the block."},{"kind":"field","key":"seq","type":{"kind":"ref","ref":"BlockCur"},"title":"Snapshot Cursor","description":"The cursor of the snapshot, representing the position in the history."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Snapshot Creation Time","description":"The time when the snapshot was created, in milliseconds since the Unix epoch."}]},"BlockPatch":{"kind":"obj","fields":[{"kind":"field","key":"blob","type":{"kind":"bin","type":{"kind":"any"}},"title":"Patch Blob","description":"The binary data of the patch. The format of the data is defined by the patch type."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Patch Creation Time","description":"The time when the patch was created, in milliseconds since the Unix epoch.\n\nThis time is set by the server when the patch received and stored on the server. If you want to also store the time when the patch was created by the user, you can include this information in the patch blob itself."}]},"BlockPatchPartial":{"kind":"obj","fields":[{"kind":"field","key":"blob","type":{"kind":"bin","type":{"kind":"any"}},"title":"Patch Blob","description":"The binary data of the patch. The format of the data is defined by the patch type."}]},"BlockPatchPartialReturn":{"kind":"obj","fields":[{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Patch Creation Time","description":"The time when the patch was created, in milliseconds since the Unix epoch.\n\nThis time is set by the server when the patch received and stored on the server. If you want to also store the time when the patch was created by the user, you can include this information in the patch blob itself."}]},"BlockBatch":{"kind":"obj","fields":[{"kind":"field","key":"patches","type":{"kind":"arr","type":{"kind":"ref","ref":"BlockPatchPartial"}}},{"kind":"field","key":"cts","type":{"kind":"num","format":"u","title":"Batch Creation Time","description":"The time when the batch was created, in milliseconds since the Unix epoch."},"optional":true},{"kind":"field","key":"seq","type":{"kind":"num","format":"u"},"title":"Batch Sequence Number","description":"The sequence number of the batch, representing the position in the history."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Batch Creation Time","description":"The time when the batch was created, in milliseconds since the Unix epoch.\n\nThis time is set by the server when the batch was received and stored on the server."}]},"BlockBatchPartial":{"kind":"obj","fields":[{"kind":"field","key":"patches","type":{"kind":"arr","type":{"kind":"ref","ref":"BlockPatchPartial"}}},{"kind":"field","key":"cts","type":{"kind":"num","format":"u","title":"Batch Creation Time","description":"The time when the batch was created, in milliseconds since the Unix epoch."},"optional":true}]},"BlockBatchPartialReturn":{"kind":"obj","fields":[{"kind":"field","key":"seq","type":{"kind":"num","format":"u"},"title":"Batch Sequence Number","description":"The sequence number of the batch, representing the position in the history."},{"kind":"field","key":"ts","type":{"kind":"num","format":"u"},"title":"Batch Creation Time","description":"The time when the batch was created, in milliseconds since the Unix epoch.\n\nThis time is set by the server when the batch was received and stored on the server."}]},"BlockEvent":{"kind":"or","types":[{"kind":"tup","types":[{"kind":"const","value":"new","title":"Event Type"}],"title":"Creation Event"},{"kind":"tup","types":[{"kind":"const","value":"upd","title":"Event Type"},{"kind":"obj","fields":[{"kind":"field","key":"batch","type":{"kind":"ref","ref":"BlockBatch"},"title":"Latest Patches","description":"Patches that have been applied to the block."}],"title":"Event Data"}],"title":"Update Event"},{"kind":"tup","types":[{"kind":"const","value":"del","title":"Event Type"}],"title":"Delete Event"}],"discriminator":["?",["==","del",["$","/0"]],2,["?",["==","upd",["$","/0"]],1,0]],"title":"Block Event","description":"A collection of possible events that can happen to a block."},"PresenceEntry":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"str"}},{"kind":"field","key":"lastSeen","type":{"kind":"num"}},{"kind":"field","key":"validUntil","type":{"kind":"num"}},{"kind":"field","key":"data","type":{"kind":"obj","fields":[],"encodeUnknownFields":true}}]}};
const methodSchema = {"kind":"fn","req":{"kind":"obj","fields":[{"kind":"field","key":"id","type":{"kind":"ref","ref":"BlockId"},"title":"Document ID","description":"The ID of the document to apply the patch to."},{"kind":"field","key":"batch","type":{"kind":"ref","ref":"BlockBatchPartial"},"title":"Batch","description":"The batch of changes to apply to the document."},{"kind":"field","key":"create","type":{"kind":"bool"},"optional":true,"title":"Create, if not Exists","description":"If true, creates a new document if it does not exist."},{"kind":"field","key":"seq","type":{"kind":"ref","ref":"BlockBatchSeq"},"optional":true,"title":"Sequence Number","description":"The last client known sequence number. The server will return history starting from this sequence number."}]},"res":{"kind":"obj","fields":[{"kind":"field","key":"batch","type":{"kind":"ref","ref":"BlockBatchPartialReturn"},"title":"Committed Batch Parts","description":"Parts of committed batch which were generated on the server."},{"kind":"field","key":"pull","type":{"kind":"obj","fields":[{"kind":"field","key":"batches","type":{"kind":"arr","type":{"kind":"ref","ref":"BlockBatch"}},"title":"Batches","description":"The list of batches that happened after the given sequence number."},{"kind":"field","key":"snapshot","type":{"kind":"arr","type":{"kind":"ref","ref":"BlockSnapshot"}},"optional":true,"title":"Snapshot","description":"The snapshot of the block, to which the batches can be applied to get the current state of the block."}]},"optional":true}]},"title":"Edit Block","intro":"Applies patches to an existing block.","description":"Applies patches to an existing document and returns the latest concurrent changes."};
const data = decoder.decode(fs.readFileSync(__dirname + '/data.json'));

test('...', () => {
  const system = new TypeSystem();
  system.importTypes(systemSchema as any);
  const method = system.t.import(methodSchema as any) as FunctionType<any, any>;
  const res = method.res;
  const value = new Value(res, data);
  const codec = new CborJsonValueCodec(new Writer(16 * 1024) as any);
  console.log(value.encode(codec))
  
  console.log(system + '');
  console.log(method + '');
  console.log(res + '');
  console.log(data);
  console.log(value + '');
});
